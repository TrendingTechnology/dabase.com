[[meta title="Testing for root"]]

Do not depend on BASH extensions!

	#/bin/sh

$USER could be forged! Also dangerous with `su`

	if test "$USER" != "xroot"
	then
		echo not root
		echo exit 1
	fi

Ugly !

	[ `id -u` -ne 0 ] && echo "not root" && echo exit 1

Using test is better, though still UGLY

	test "x$WHOAMI" != "xroot" && echo "not root" && echo exit 1

Original bourne did not know test prepending !

	if ! test `id -u` = 0; then
		echo "not root" > /dev/stderr # /dev/stderror is not portable!
		echo exit 1
	fi

Original bourne did not know semi-colons either

	if [ `id -u` -ne 0 ]; then
		echo >&2 "not root"
		echo exit 1
	fi

Original bourne did not know $() (subshell)

	if test "x$(whoami)" != "xroot" # in case whoami returns empty value
	then
		echo >&2 "not root"
		echo exit 1
	fi

Easy to read POSIX shell, though missing quotes :(

	if test `id -u` != 0
	then
		echo >&2 "not root"
		echo exit 1
	fi

Old Bourne shell flavor

	ID=`id -u` # id is _slightly_ better than whoami
	if test "x$ID" != "x0"
	then
		echo >&2 "not root"
		echo exit 1
	fi

Modern safe shell style with quotes and [no backticks](http://wooledge.org:8000/BashFAQ/082)

	if [ "$(id -u)" -ne "0" ]
	then
		echo >&2 "not root"
		echo exit 1
	fi
