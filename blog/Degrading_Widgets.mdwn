I've written before about [key Web features such as degrading
gracefully](http://natalian.org/archives/2008/09/16/3-reasons-why-the-web-platform-will-not-fragment-on-mobiles/)
and how that feature is going make the Web a winner on mobiles.

I could be wrong about this, because of widgets.

Widgets are downloaded onto your phone and quite possibly have nothing to do
with the original site you retrieved it from on the first place. You could have
obtained a widget via a friend or some other arbitrary channel.

So what's the problem? Firstly updating. When you launch the widget, will it be
up to date like the Web is? This is not guaranteed as widgets are designed to
work offline.

Next problem, APIs. New APIs like that defined by Opera or BONDI are
**volatile**. APIs will change dramatically and they will not necessarily
remain backwards compatibility.

What happens when you have a widget that depends on 3 APIs (e.g. file, geo,
user interface for soft keys)? On a runtime where 1 of the APIs has been
updated? Think of the permutation explosion.

The nature of Javascript extensions and [asynchronous
APIs](http://dev.w3.org/geo/api/), make it very hard to degrade from situations
where even a single API may not be functioning as expected.

Javascript engines typically halt in any case of an uncaught exception. A very
undesirable user experience!

Besides APIs, the [new security
mechanisms](http://www.w3.org/TR/widgets-digsig/) for widgets will also be very
likely to volatile.

Therefore it will be likely that widgets (at least at first) will be tested and
pinned to a particular **static** snapshot of a widget runtime.

One solution is that widget runtimes _must_ make every effort possible to keep
a widget [up to date](http://dev.w3.org/2006/waf/widgets/#the-update-element).
However some people might argue that widgets do not have a fixed origin. I
would like to argue that someone needs to take responsibility of maintaining a
widget. And it should not be the end user.

Perhaps the end user can delegate the maintainership of the widgets on the
device. For example in Debian I could switch my `sources.list` from unstable to
stable since I want to use more stable software.
